{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sree chandra duppala\\\\Documents\\\\React\\\\dijkstra-visualizer-react\\\\Dijkstra-Visualizer\\\\dijkstra-visualizer\\\\src\\\\VisualizerComponent\\\\VisualizerComponent.js\";\nimport React, { Component } from 'react';\nimport './style.css';\nimport Cell from '../Cell/Cell';\nimport { dijkstra, getNodesInShortestPathOrder } from '../dijkstra_Algorithm';\nlet StartCellRow = 10;\nlet StartCellCol = 15;\nlet FinishCellRow = 10;\nlet FinishCellCol = 35;\n\nclass VisualizerComponent extends Component {\n  constructor() {\n    super();\n\n    this.componentDidMount = () => {\n      const grid = GridFormation();\n      this.setState({\n        grid\n      });\n    };\n\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      startPressed: false\n    };\n  }\n\n  handleMouseDown(row, col) {\n    if (row === CellRow && col === FinishCellCol) {\n      this.state.startPressed = true;\n      const newGrid = getNewStartNode(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      });\n      return;\n    } //if(row === StartCellRow && col === StartCellCol)\n    //return grid;\n    else {\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({\n          grid: newGrid,\n          mouseIsPressed: true\n        });\n      }\n  }\n\n  handleMouseEnter(row, col) {\n    if (row === FinishCellRow && col === FinishCellCol) {\n      StartCellRow = row;\n      StartCellCol = col;\n      const newGrid = getNewStartNode(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n      return;\n    }\n\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`cell-${node.row}-${node.col}`).className = 'cell cell-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`cell-${node.row}-${node.col}`).className = 'cell cell-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[StartCellRow][StartCellCol];\n    const finishNode = grid[FinishCellRow][FinishCellCol];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeDijkstra(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }, \"Visualize Dijkstra's Algorithm\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          row,\n          col,\n          isFinish,\n          isStart,\n          isWall\n        } = node;\n        return /*#__PURE__*/React.createElement(Cell, {\n          key: nodeIdx,\n          col: col,\n          row: row,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 21\n          }\n        });\n      }));\n    })));\n  }\n\n}\n\nconst GridFormation = () => {\n  const grid = []; // empty grid\n\n  for (let row = 0; row < 23; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 55; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === StartCellRow && col === StartCellCol,\n    isFinish: row === FinishCellRow && col === FinishCellCol,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    hasWeight: false,\n    previousNode: null\n  };\n};\n\nconst getNewStartNode = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isStart: true\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  if (row === FinishCellRow && col === FinishCellCol) {}\n\n  if (row === StartCellRow && col === StartCellCol) return grid;\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nexport default VisualizerComponent;","map":{"version":3,"sources":["C:/Users/Sree chandra duppala/Documents/React/dijkstra-visualizer-react/Dijkstra-Visualizer/dijkstra-visualizer/src/VisualizerComponent/VisualizerComponent.js"],"names":["React","Component","Cell","dijkstra","getNodesInShortestPathOrder","StartCellRow","StartCellCol","FinishCellRow","FinishCellCol","VisualizerComponent","constructor","componentDidMount","grid","GridFormation","setState","state","mouseIsPressed","startPressed","handleMouseDown","row","col","CellRow","newGrid","getNewStartNode","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","visualizeDijkstra","startNode","finishNode","render","map","rowIdx","nodeIdx","isFinish","isStart","isWall","currentRow","push","createNode","distance","Infinity","isVisited","hasWeight","previousNode","slice","newNode"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAEA,OAAO,aAAP;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,SAAQC,QAAR,EAAkBC,2BAAlB,QAAoD,uBAApD;AAEA,IAAIC,YAAY,GAAG,EAAnB;AACA,IAAIC,YAAY,GAAG,EAAnB;AACA,IAAIC,aAAa,GAAG,EAApB;AACA,IAAIC,aAAa,GAAG,EAApB;;AAEA,MAAMC,mBAAN,SAAkCR,SAAlC,CAA4C;AAExCS,EAAAA,WAAW,GAAG;AACV;;AADU,SAUdC,iBAVc,GAUM,MAAM;AACtB,YAAMC,IAAI,GAAGC,aAAa,EAA1B;AACA,WAAKC,QAAL,CAAc;AAACF,QAAAA;AAAD,OAAd;AACD,KAbW;;AAEV,SAAKG,KAAL,GAAa;AACXH,MAAAA,IAAI,EAAE,EADK;AAEXI,MAAAA,cAAc,EAAE,KAFL;AAGXC,MAAAA,YAAY,EAAG;AAHJ,KAAb;AAKD;;AAQDC,EAAAA,eAAe,CAACC,GAAD,EAAMC,GAAN,EAAW;AACxB,QAAGD,GAAG,KAAGE,OAAN,IAAeD,GAAG,KAAKZ,aAA1B,EACA;AACE,WAAKO,KAAL,CAAWE,YAAX,GAA0B,IAA1B;AACA,YAAMK,OAAO,GAAIC,eAAe,CAAC,KAAKR,KAAL,CAAWH,IAAZ,EAAkBO,GAAlB,EAAuBC,GAAvB,CAAhC;AACA,WAAKN,QAAL,CAAc;AAACF,QAAAA,IAAI,EAAEU,OAAP;AAAgBN,QAAAA,cAAc,EAAE;AAAhC,OAAd;AACA;AACD,KAND,CAOA;AACA;AARA,SASI;AACF,cAAMM,OAAO,GAAGE,yBAAyB,CAAC,KAAKT,KAAL,CAAWH,IAAZ,EAAkBO,GAAlB,EAAuBC,GAAvB,CAAzC;AACA,aAAKN,QAAL,CAAc;AAACF,UAAAA,IAAI,EAAEU,OAAP;AAAgBN,UAAAA,cAAc,EAAE;AAAhC,SAAd;AACD;AAEF;;AAEDS,EAAAA,gBAAgB,CAACN,GAAD,EAAMC,GAAN,EAAW;AACzB,QAAGD,GAAG,KAAGZ,aAAN,IAAqBa,GAAG,KAAKZ,aAAhC,EACA;AACEH,MAAAA,YAAY,GAAGc,GAAf;AACAb,MAAAA,YAAY,GAAGc,GAAf;AACA,YAAME,OAAO,GAAGC,eAAe,CAAC,KAAKR,KAAL,CAAWH,IAAZ,EAAkBO,GAAlB,EAAuBC,GAAvB,CAA/B;AACA,WAAKN,QAAL,CAAc;AAACF,QAAAA,IAAI,EAAEU;AAAP,OAAd;AACA;AACD;;AACD,QAAI,CAAC,KAAKP,KAAL,CAAWC,cAAhB,EAAgC;AAChC,UAAMM,OAAO,GAAGE,yBAAyB,CAAC,KAAKT,KAAL,CAAWH,IAAZ,EAAkBO,GAAlB,EAAuBC,GAAvB,CAAzC;AACA,SAAKN,QAAL,CAAc;AAACF,MAAAA,IAAI,EAAEU;AAAP,KAAd;AACD;;AAEDI,EAAAA,aAAa,GAAG;AACd,SAAKZ,QAAL,CAAc;AAACE,MAAAA,cAAc,EAAE;AAAjB,KAAd;AACD;;AAEDW,EAAAA,eAAe,CAACC,mBAAD,EAAsBC,wBAAtB,EAAgD;AAC7D,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIF,mBAAmB,CAACG,MAAzC,EAAiDD,CAAC,EAAlD,EAAsD;AACpD,UAAIA,CAAC,KAAKF,mBAAmB,CAACG,MAA9B,EAAsC;AACpCC,QAAAA,UAAU,CAAC,MAAM;AACf,eAAKC,mBAAL,CAAyBJ,wBAAzB;AACD,SAFS,EAEP,KAAKC,CAFE,CAAV;AAGA;AACD;;AACDE,MAAAA,UAAU,CAAC,MAAM;AACf,cAAME,IAAI,GAAGN,mBAAmB,CAACE,CAAD,CAAhC;AACAK,QAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOF,IAAI,CAACf,GAAI,IAAGe,IAAI,CAACd,GAAI,EAArD,EAAwDiB,SAAxD,GACE,mBADF;AAED,OAJS,EAIP,KAAKP,CAJE,CAAV;AAKD;AACF;;AAEDG,EAAAA,mBAAmB,CAACJ,wBAAD,EAA2B;AAC5C,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,wBAAwB,CAACE,MAA7C,EAAqDD,CAAC,EAAtD,EAA0D;AACxDE,MAAAA,UAAU,CAAC,MAAM;AACf,cAAME,IAAI,GAAGL,wBAAwB,CAACC,CAAD,CAArC;AACAK,QAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOF,IAAI,CAACf,GAAI,IAAGe,IAAI,CAACd,GAAI,EAArD,EAAwDiB,SAAxD,GACE,yBADF;AAED,OAJS,EAIP,KAAKP,CAJE,CAAV;AAKD;AACF;;AAEDQ,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAC1B,MAAAA;AAAD,QAAS,KAAKG,KAApB;AACA,UAAMwB,SAAS,GAAG3B,IAAI,CAACP,YAAD,CAAJ,CAAmBC,YAAnB,CAAlB;AACA,UAAMkC,UAAU,GAAG5B,IAAI,CAACL,aAAD,CAAJ,CAAoBC,aAApB,CAAnB;AACA,UAAMoB,mBAAmB,GAAGzB,QAAQ,CAACS,IAAD,EAAO2B,SAAP,EAAkBC,UAAlB,CAApC;AACA,UAAMX,wBAAwB,GAAGzB,2BAA2B,CAACoC,UAAD,CAA5D;AACA,SAAKb,eAAL,CAAqBC,mBAArB,EAA0CC,wBAA1C;AACD;;AAGHY,EAAAA,MAAM,GAAG;AAEL,UAAM;AAAC7B,MAAAA,IAAD;AAAOI,MAAAA;AAAP,QAAyB,KAAKD,KAApC;AAEA,wBACE,uDACA;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKuB,iBAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADA,eAKF;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG1B,IAAI,CAAC8B,GAAL,CAAS,CAACvB,GAAD,EAAMwB,MAAN,KAAiB;AACzB,0BACE;AAAK,QAAA,GAAG,EAAEA,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGxB,GAAG,CAACuB,GAAJ,CAAQ,CAACR,IAAD,EAAOU,OAAP,KAAmB;AAC1B,cAAM;AAACzB,UAAAA,GAAD;AAAMC,UAAAA,GAAN;AAAWyB,UAAAA,QAAX;AAAqBC,UAAAA,OAArB;AAA8BC,UAAAA;AAA9B,YAAwCb,IAA9C;AACA,4BACE,oBAAC,IAAD;AACE,UAAA,GAAG,EAAEU,OADP;AAEE,UAAA,GAAG,EAAExB,GAFP;AAGE,UAAA,GAAG,EAAED,GAHP;AAIE,UAAA,QAAQ,EAAE0B,QAJZ;AAKE,UAAA,OAAO,EAAEC,OALX;AAME,UAAA,MAAM,EAAEC,MANV;AAOE,UAAA,cAAc,EAAE/B,cAPlB;AAQE,UAAA,WAAW,EAAE,CAACG,GAAD,EAAMC,GAAN,KAAc,KAAKF,eAAL,CAAqBC,GAArB,EAA0BC,GAA1B,CAR7B;AASE,UAAA,YAAY,EAAE,CAACD,GAAD,EAAMC,GAAN,KACZ,KAAKK,gBAAL,CAAsBN,GAAtB,EAA2BC,GAA3B,CAVJ;AAYE,UAAA,SAAS,EAAE,MAAM,KAAKM,aAAL,EAZnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,OAnBA,CADH,CADF;AAwBD,KAzBA,CADH,CALE,CADF;AAoCH;;AAhIuC;;AAoI5C,MAAMb,aAAa,GAAG,MAAM;AACxB,QAAMD,IAAI,GAAG,EAAb,CADwB,CACP;;AACjB,OAAK,IAAIO,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;AACjC,UAAM6B,UAAU,GAAG,EAAnB;;AACA,SAAK,IAAI5B,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAE,EAAvB,EAA2BA,GAAG,EAA9B,EAAkC;AAChC4B,MAAAA,UAAU,CAACC,IAAX,CAAgBC,UAAU,CAAC9B,GAAD,EAAMD,GAAN,CAA1B;AACD;;AACDP,IAAAA,IAAI,CAACqC,IAAL,CAAUD,UAAV;AACD;;AACD,SAAOpC,IAAP;AACD,CAVH;;AAWE,MAAMsC,UAAU,GAAG,CAAC9B,GAAD,EAAMD,GAAN,KAAc;AAC/B,SAAO;AACLC,IAAAA,GADK;AAELD,IAAAA,GAFK;AAGL2B,IAAAA,OAAO,EAAE3B,GAAG,KAAKd,YAAR,IAAwBe,GAAG,KAAKd,YAHpC;AAILuC,IAAAA,QAAQ,EAAE1B,GAAG,KAAKZ,aAAR,IAAyBa,GAAG,KAAKZ,aAJtC;AAKL2C,IAAAA,QAAQ,EAAEC,QALL;AAMLC,IAAAA,SAAS,EAAE,KANN;AAOLN,IAAAA,MAAM,EAAE,KAPH;AAQLO,IAAAA,SAAS,EAAG,KARP;AASLC,IAAAA,YAAY,EAAE;AATT,GAAP;AAWD,CAZD;;AAcA,MAAMhC,eAAe,GAAG,CAACX,IAAD,EAAOO,GAAP,EAAYC,GAAZ,KAAoB;AAE1C,QAAME,OAAO,GAAGV,IAAI,CAAC4C,KAAL,EAAhB;AACE,QAAMtB,IAAI,GAAGZ,OAAO,CAACH,GAAD,CAAP,CAAaC,GAAb,CAAb;AACA,QAAMqC,OAAO,GAAG,EACd,GAAGvB,IADW;AAEdY,IAAAA,OAAO,EAAE;AAFK,GAAhB;AAIAxB,EAAAA,OAAO,CAACH,GAAD,CAAP,CAAaC,GAAb,IAAoBqC,OAApB;AACA,SAAOnC,OAAP;AAEH,CAXD;;AAaA,MAAME,yBAAyB,GAAG,CAACZ,IAAD,EAAOO,GAAP,EAAYC,GAAZ,KAAoB;AACpD,MAAGD,GAAG,KAAGZ,aAAN,IAAqBa,GAAG,KAAKZ,aAAhC,EACA,CAEC;;AAED,MAAGW,GAAG,KAAKd,YAAR,IAAwBe,GAAG,KAAKd,YAAnC,EACA,OAAOM,IAAP;AACA,QAAMU,OAAO,GAAGV,IAAI,CAAC4C,KAAL,EAAhB;AACA,QAAMtB,IAAI,GAAGZ,OAAO,CAACH,GAAD,CAAP,CAAaC,GAAb,CAAb;AACA,QAAMqC,OAAO,GAAG,EACd,GAAGvB,IADW;AAEda,IAAAA,MAAM,EAAE,CAACb,IAAI,CAACa;AAFA,GAAhB;AAIAzB,EAAAA,OAAO,CAACH,GAAD,CAAP,CAAaC,GAAb,IAAoBqC,OAApB;AACA,SAAOnC,OAAP;AACD,CAhBD;;AAkBF,eAAeb,mBAAf","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './style.css';\r\nimport Cell from '../Cell/Cell';\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../dijkstra_Algorithm';\r\n\r\nlet StartCellRow = 10;\r\nlet StartCellCol = 15;\r\nlet FinishCellRow = 10;\r\nlet FinishCellCol = 35;\r\n\r\nclass VisualizerComponent extends Component {\r\n    \r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n          grid: [],\r\n          mouseIsPressed: false,\r\n          startPressed : false,\r\n        };\r\n      }\r\n    \r\n    \r\n    componentDidMount = () => {\r\n        const grid = GridFormation();\r\n        this.setState({grid});\r\n      }\r\n\r\n      handleMouseDown(row, col) {\r\n        if(row===CellRow&&col === FinishCellCol)\r\n        {\r\n          this.state.startPressed = true;\r\n          const newGrid  = getNewStartNode(this.state.grid, row, col);\r\n          this.setState({grid: newGrid, mouseIsPressed: true});\r\n          return;\r\n        }\r\n        //if(row === StartCellRow && col === StartCellCol)\r\n        //return grid;\r\n        else{\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid, mouseIsPressed: true});\r\n        }\r\n        \r\n      }\r\n    \r\n      handleMouseEnter(row, col) {\r\n        if(row===FinishCellRow&&col === FinishCellCol)\r\n        {\r\n          StartCellRow = row;\r\n          StartCellCol = col;\r\n          const newGrid = getNewStartNode(this.state.grid, row, col);\r\n          this.setState({grid: newGrid});\r\n          return ;\r\n        }\r\n        if (!this.state.mouseIsPressed) return;\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n        this.setState({grid: newGrid});\r\n      }\r\n    \r\n      handleMouseUp() {\r\n        this.setState({mouseIsPressed: false});\r\n      }\r\n\r\n      animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n          if (i === visitedNodesInOrder.length) {\r\n            setTimeout(() => {\r\n              this.animateShortestPath(nodesInShortestPathOrder);\r\n            }, 10 * i);\r\n            return;\r\n          }\r\n          setTimeout(() => {\r\n            const node = visitedNodesInOrder[i];\r\n            document.getElementById(`cell-${node.row}-${node.col}`).className =\r\n              'cell cell-visited';\r\n          }, 10 * i);\r\n        }\r\n      }\r\n    \r\n      animateShortestPath(nodesInShortestPathOrder) {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n          setTimeout(() => {\r\n            const node = nodesInShortestPathOrder[i];\r\n            document.getElementById(`cell-${node.row}-${node.col}`).className =\r\n              'cell cell-shortest-path';\r\n          }, 50 * i);\r\n        }\r\n      }\r\n    \r\n      visualizeDijkstra() {\r\n        const {grid} = this.state;\r\n        const startNode = grid[StartCellRow][StartCellCol];\r\n        const finishNode = grid[FinishCellRow][FinishCellCol];\r\n        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n      }\r\n\r\n\r\n    render() {\r\n\r\n        const {grid, mouseIsPressed} = this.state;\r\n\r\n        return(\r\n          <>\r\n          <button onClick={() => this.visualizeDijkstra()}>\r\n          Visualize Dijkstra's Algorithm\r\n        </button>\r\n\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {row, col, isFinish, isStart, isWall} = node;\r\n                  return (\r\n                    <Cell\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      row={row}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                    >\r\n                    </Cell>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        </>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nconst GridFormation = () => {\r\n    const grid = []; // empty grid\r\n    for (let row = 0; row < 23; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col <55; col++) {\r\n        currentRow.push(createNode(col, row));\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    return grid;\r\n  };\r\n  const createNode = (col, row) => {\r\n    return {\r\n      col,\r\n      row,\r\n      isStart: row === StartCellRow && col === StartCellCol,\r\n      isFinish: row === FinishCellRow && col === FinishCellCol,\r\n      distance: Infinity,\r\n      isVisited: false,\r\n      isWall: false,\r\n      hasWeight : false,\r\n      previousNode: null,\r\n    };\r\n  };\r\n\r\n  const getNewStartNode = (grid, row, col) => {\r\n   \r\n    const newGrid = grid.slice();\r\n      const node = newGrid[row][col];\r\n      const newNode = {\r\n        ...node,\r\n        isStart: true,\r\n      };\r\n      newGrid[row][col] = newNode;\r\n      return newGrid;\r\n\r\n  }\r\n\r\n  const getNewGridWithWallToggled = (grid, row, col) => {\r\n    if(row===FinishCellRow&&col === FinishCellCol)\r\n    {\r\n      \r\n    }\r\n    \r\n    if(row === StartCellRow && col === StartCellCol)\r\n    return grid;\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n  };\r\n\r\nexport default VisualizerComponent;"]},"metadata":{},"sourceType":"module"}