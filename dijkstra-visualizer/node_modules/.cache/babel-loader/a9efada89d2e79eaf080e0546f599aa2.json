{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sree chandra duppala\\\\Documents\\\\React\\\\dijkstra-visualizer-react\\\\Dijkstra-Visualizer\\\\dijkstra-visualizer\\\\src\\\\VisualizerComponent\\\\VisualizerComponent.js\";\nimport React, { Component } from 'react';\nimport './style.css';\nimport Cell from '../Cell/Cell';\n\nclass VisualizerComponent extends Component {\n  constructor() {\n    super();\n\n    this.componentDidMount = () => {\n      const grid = GridFormation();\n      this.setState({\n        grid\n      });\n    };\n\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          row,\n          col,\n          isFinish,\n          isStart,\n          isWall\n        } = node;\n        return /*#__PURE__*/React.createElement(Cell, {\n          key: nodeIdx,\n          col: col,\n          row: row,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 21\n          }\n        });\n      }));\n    }));\n  }\n\n}\n\nconst GridFormation = () => {\n  const grid = []; // empty grid\n\n  for (let row = 0; row < 23; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 55; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    hasWeight: false,\n    previousNode: null\n  };\n};\n\nexport default VisualizerComponent;","map":{"version":3,"sources":["C:/Users/Sree chandra duppala/Documents/React/dijkstra-visualizer-react/Dijkstra-Visualizer/dijkstra-visualizer/src/VisualizerComponent/VisualizerComponent.js"],"names":["React","Component","Cell","VisualizerComponent","constructor","componentDidMount","grid","GridFormation","setState","state","mouseIsPressed","render","map","row","rowIdx","node","nodeIdx","col","isFinish","isStart","isWall","currentRow","push","createNode","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","distance","Infinity","isVisited","hasWeight","previousNode"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAEA,OAAO,aAAP;AACA,OAAOC,IAAP,MAAiB,cAAjB;;AAIA,MAAMC,mBAAN,SAAkCF,SAAlC,CAA4C;AAExCG,EAAAA,WAAW,GAAG;AACV;;AADU,SASdC,iBATc,GASM,MAAM;AACtB,YAAMC,IAAI,GAAGC,aAAa,EAA1B;AACA,WAAKC,QAAL,CAAc;AAACF,QAAAA;AAAD,OAAd;AACD,KAZW;;AAEV,SAAKG,KAAL,GAAa;AACXH,MAAAA,IAAI,EAAE,EADK;AAEXI,MAAAA,cAAc,EAAE;AAFL,KAAb;AAID;;AAQHC,EAAAA,MAAM,GAAG;AAEL,UAAM;AAACL,MAAAA,IAAD;AAAOI,MAAAA;AAAP,QAAyB,KAAKD,KAApC;AAEA,wBAEA;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGH,IAAI,CAACM,GAAL,CAAS,CAACC,GAAD,EAAMC,MAAN,KAAiB;AACzB,0BACE;AAAK,QAAA,GAAG,EAAEA,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,GAAG,CAACD,GAAJ,CAAQ,CAACG,IAAD,EAAOC,OAAP,KAAmB;AAC1B,cAAM;AAACH,UAAAA,GAAD;AAAMI,UAAAA,GAAN;AAAWC,UAAAA,QAAX;AAAqBC,UAAAA,OAArB;AAA8BC,UAAAA;AAA9B,YAAwCL,IAA9C;AACA,4BACE,oBAAC,IAAD;AACE,UAAA,GAAG,EAAEC,OADP;AAEE,UAAA,GAAG,EAAEC,GAFP;AAGE,UAAA,GAAG,EAAEJ,GAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,OAVA,CADH,CADF;AAeD,KAhBA,CADH,CAFA;AAuBH;;AA3CuC;;AA+C5C,MAAMN,aAAa,GAAG,MAAM;AACxB,QAAMD,IAAI,GAAG,EAAb,CADwB,CACP;;AACjB,OAAK,IAAIO,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;AACjC,UAAMQ,UAAU,GAAG,EAAnB;;AACA,SAAK,IAAIJ,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAE,EAAvB,EAA2BA,GAAG,EAA9B,EAAkC;AAChCI,MAAAA,UAAU,CAACC,IAAX,CAAgBC,UAAU,CAACN,GAAD,EAAMJ,GAAN,CAA1B;AACD;;AACDP,IAAAA,IAAI,CAACgB,IAAL,CAAUD,UAAV;AACD;;AACD,SAAOf,IAAP;AACD,CAVH;;AAWE,MAAMiB,UAAU,GAAG,CAACN,GAAD,EAAMJ,GAAN,KAAc;AAC/B,SAAO;AACLI,IAAAA,GADK;AAELJ,IAAAA,GAFK;AAGLM,IAAAA,OAAO,EAAEN,GAAG,KAAKW,cAAR,IAA0BP,GAAG,KAAKQ,cAHtC;AAILP,IAAAA,QAAQ,EAAEL,GAAG,KAAKa,eAAR,IAA2BT,GAAG,KAAKU,eAJxC;AAKLC,IAAAA,QAAQ,EAAEC,QALL;AAMLC,IAAAA,SAAS,EAAE,KANN;AAOLV,IAAAA,MAAM,EAAE,KAPH;AAQLW,IAAAA,SAAS,EAAG,KARP;AASLC,IAAAA,YAAY,EAAE;AATT,GAAP;AAWD,CAZD;;AAaF,eAAe7B,mBAAf","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './style.css';\r\nimport Cell from '../Cell/Cell';\r\n\r\n\r\n\r\nclass VisualizerComponent extends Component {\r\n    \r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n          grid: [],\r\n          mouseIsPressed: false,\r\n        };\r\n      }\r\n    \r\n    \r\n    componentDidMount = () => {\r\n        const grid = GridFormation();\r\n        this.setState({grid});\r\n      }\r\n\r\n    render() {\r\n\r\n        const {grid, mouseIsPressed} = this.state;\r\n\r\n        return(\r\n\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {row, col, isFinish, isStart, isWall} = node;\r\n                  return (\r\n                    <Cell\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      row={row}\r\n                    >\r\n                    </Cell>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nconst GridFormation = () => {\r\n    const grid = []; // empty grid\r\n    for (let row = 0; row < 23; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col <55; col++) {\r\n        currentRow.push(createNode(col, row));\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    return grid;\r\n  };\r\n  const createNode = (col, row) => {\r\n    return {\r\n      col,\r\n      row,\r\n      isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n      isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n      distance: Infinity,\r\n      isVisited: false,\r\n      isWall: false,\r\n      hasWeight : false,\r\n      previousNode: null,\r\n    };\r\n  };\r\nexport default VisualizerComponent;"]},"metadata":{},"sourceType":"module"}